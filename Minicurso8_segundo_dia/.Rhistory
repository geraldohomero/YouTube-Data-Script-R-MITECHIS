scale_x_discrete(labels = function(x) gsub("_.+$", "", x)) +  # Define os rótulos do eixo x, removendo o sufixo "_[número do tópico]"
coord_flip() + # Inverte os eixos para que os rótulos do eixo x sejam legíveis
labs(
x = "Top 10 termos por Tópicos",
y = "phi (Frequência Termo x Tópico)",
title = "Tópicos das notícias acerca do conflito Israel vs Hamas",
subtitle = "Análise de 10 mil notícias publicadas entre 07/10/2023 e 30/04/2024",
caption = "Fonte: Tuguna Digital Lab - Laboratório de Humanidades Digitais | UEMG Barbacena") +
theme_bw() +
theme(
legend.position = "none",
plot.title = element_text(size = 18, face = "bold"),
plot.subtitle = element_text(size = 12, face = "bold"),
plot.caption = element_text(size = 10),
axis.title.y = element_text(size = 12, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
strip.text.x = element_text(size = 10, colour= "white", face= "bold"),
strip.background = element_rect(colour = "black", fill= "black"),
strip.text.x.top = element_text(colour = "white", face = "bold", size = 14),
axis.text.x = element_text(face = "bold", color = "black", size = 10),
axis.text.y = element_text(face = "bold", color = "black", size = 10)) -> plot_topicos_news_gaza_israel
plot_topicos_news_gaza_israel
#------------------------------------------------------------------------------#
top_termos |>   # Usa o dataframe top_termos como entrada
mutate(topicos = factor(topicos,
levels = c("topic10", "topic3", "topic9", "topic2",
"topic8", "topic6", "topic1", "topic4", "topic5", "topic7"))) |>
ggplot(aes(x = reorder_within(termos, phi, topicos, sep = "_"),  # Define os eixos x e y, onde os termos são reordenados dentro de cada tópico com base na frequência phi
y =  phi,  # Define a frequência phi como a altura das barras
fill = factor(topicos))) +  # Usa a variável de tópicos para colorir as barras
geom_bar(stat = 'identity', show.legend = FALSE) +  # Cria um gráfico de barras, onde a altura das barras é representada pela frequência phi
facet_wrap(~ topicos, scales = "free", ncol = 5, # Cria painéis separados para cada tópico, com escala livre e 5 colunas por linha
labeller = as_labeller(c(topic1 = "Aliados\nn = 832 (8.2%)",
topic2 = "Reféns do Conflito\nn = 1.203 (12%)",
topic3 = "Yemenitas\nn = 669 (6.6%)",
topic4 = "Batalhas\nn = 1130 (11%)",
topic5 = "Conflito Irâ\nn = 1088 (11%)",
topic6 = "Perdas Humanas\nn = 1002 (9.9%)",
topic7 = "Crise Refugiados\nn = 1269 (12%)",
topic8 = "Manifestações\nn = 687 (6.8%)",
topic9 = "Negociações da ONU\nn = 1526 (15%)",
topic10 = "Ocupação Violenta\nn = 749 (7.4%)"
))) +
scale_x_discrete(labels = function(x) gsub("_.+$", "", x)) +  # Define os rótulos do eixo x, removendo o sufixo "_[número do tópico]"
coord_flip() + # Inverte os eixos para que os rótulos do eixo x sejam legíveis
labs(
x = "Top 10 termos por Tópicos",
y = "phi (Frequência Termo x Tópico)",
title = "Tópicos das notícias acerca do conflito Israel vs Hamas",
subtitle = "Análise de 10 mil notícias publicadas entre 07/10/2023 e 30/04/2024",
caption = "Fonte: Tuguna Digital Lab - Laboratório de Humanidades Digitais | UEMG Barbacena") +
theme_bw() +
theme(
legend.position = "none",
plot.title = element_text(size = 18, face = "bold"),
plot.subtitle = element_text(size = 12, face = "bold"),
plot.caption = element_text(size = 10),
axis.title.y = element_text(size = 12, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
strip.text.x = element_text(size = 10, colour= "white", face= "bold"),
strip.background = element_rect(colour = "black", fill= "black"),
strip.text.x.top = element_text(colour = "white", face = "bold", size = 14),
axis.text.x = element_text(face = "bold", color = "black", size = 10),
axis.text.y = element_text(face = "bold", color = "black", size = 10)) -> plot_topicos_news_gaza_israel
plot_topicos_news_gaza_israel
#------------------------------------------------------------------------------#
# Salvar o gráfico como um arquivo SVG (Scalable Vector Graphics)
ggsave(
plot = plot_topicos_news_gaza_israel,  # Gráfico a ser salvo
filename = "plot_topicos_news_gaza_israel.svg",  # Nome do arquivo de saída
height = 6,  # Altura do gráfico em polegadas
width = 16,  # Largura do gráfico em polegadas
units = "in",  # Unidade de medida (polegadas)
dpi = 600  # Resolução da imagem em pontos por polegada
)
# Salvar o gráfico como um arquivo PNG (Portable Network Graphics)
ggsave(
plot = plot_topicos_news_gaza_israel,
filename = "plot_topicos_news_gaza_israel.png",
height = 6,
width = 16,
units = "in",
dpi = 600
)
################################################################################
#               Visualização do Resultados em Nuvem de Palavras                #
################################################################################
topicos_news_gaza_israel$phi |>  # Acessa a matriz phi do modelo de tópicos
as.table() |>  # Converte para um formato de tabela
as.data.frame() |>  # Converte para um data frame
rename(topicos = Var1,   # Renomeia a primeira coluna para 'topicos'
termos = Var2,    # Renomeia a segunda coluna para 'termos'
phi = Freq) |>    # Renomeia a terceira coluna para 'phi'
group_by(topicos) |>     # Agrupa os dados por tópico
top_n(50, phi) |>        # Seleciona os 10 principais termos de cada tópico com base nos valores de phi
ungroup() |>
ggplot(aes(label = termos, fontface = "bold", size = phi*1000, color = topicos)) +
geom_text_wordcloud(area_corr = TRUE) +
scale_size_area(max_size = 20) +
facet_wrap(~topicos, scales = "free", ncol = 5, nrow = 2,
labeller = as_labeller(c(topic1 = "Aliados\nn = 832 (8.2%)",
topic2 = "Reféns do Conflito\nn = 1.203 (12%)",
topic3 = "Yemenitas\nn = 669 (6.6%)",
topic4 = "Batalhas\nn = 1130 (11%)",
topic5 = "Conflito Irâ\nn = 1088 (11%)",
topic6 = "Perdas Humanas\nn = 1002 (9.9%)",
topic7 = "Crise Refugiados\nn = 1269 (12%)",
topic8 = "Manifestações\nn = 687 (6.8%)",
topic9 = "Negociações da ONU\nn = 1526 (15%)",
topic10 = "Ocupação Violenta\nn = 749 (7.4%)"))) +
scale_colour_viridis_d() +
theme_bw() +
theme(strip.background = element_rect(fill = "black"),
strip.text.x = element_text(face = "bold", colour = "white", size = 12),
plot.title = element_text(size = 16, face = "bold"),
plot.caption = element_text(size = 10, face = "bold.italic")) +
labs(title = "Nuvem de palavras dos tópicos das notícias acerca do conflito Israel vs Hamas") -> plot_wordcloud_topicos_news_gaza_israel
View(topicos_news_gaza_israel)
plot_wordcloud_topicos_news_gaza_israel
################################################################################
#               Visualização do Resultados em Série Temporal                   #
################################################################################
# Selecionar as colunas 'topicos' e 'data' do conjunto de dados
dataset_news_gaza_israel |>
select(topicos, data) |>
# Adicionar uma coluna 'topicos' para ser usada como legenda e definir a ordem das categorias dos tópicos
mutate(topicos = factor(topicos, levels = c("topic1", "topic2", "topic3", "topic4", "topic5",
"topic6", "topic7", "topic8", "topic9", "topic10"))) |>
# Agrupar os dados por 'data' e 'topicos'
group_by(data, topicos) |>
# Contar o número de ocorrências de cada combinação de 'data' e 'topicos'
count() |>
filter(topicos == "topic1") |>
# Criar o gráfico de linha e ponto
ggplot(aes(data, n)) +
geom_line(size = .5) +  # Adicionar linhas
geom_point(size = .3, col = "red", show.legend = F) +  # Adicionar pontos
theme_bw() +  # Aplicar um tema de fundo branco
# Personalizar as configurações do tema
theme(
legend.position = "none",
plot.title = element_text(size = 18, face = "bold"),
plot.subtitle = element_text(size = 12, face = "bold"),
plot.caption = element_text(size = 10),
axis.title.y = element_text(size = 12, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
strip.text.x = element_text(size = 10, colour= "white", face= "bold"),
strip.background = element_rect(colour = "black", fill= "black"),
strip.text.x.top = element_text(colour = "white", face = "bold", size = 14),
axis.text.x = element_text(face = "bold", color = "black", size = 10),
axis.text.y = element_text(face = "bold", color = "black", size = 10)
) +
scale_x_date(date_breaks = "years",       # Definir os intervalos principais de rótulos como anos
date_labels = "%Y",          # Formato dos rótulos do eixo x (apenas ano)
date_minor_breaks = "1 year") +  # Definir os intervalos menores de rótulos como anos
scale_y_continuous(labels = comma_format(big.mark = ".", decimal.mark = ",")) +  # Definir intervalo de valores no eixo y
labs(x = "Ano", y = "Frequência",
title = "Proporções dos tópicos ao longo do tempo em intervalo anual",
caption = "Fonte: Tuguna Digital Lab - Laboratório Experimental em Humanidades Digitais\nUniversidade do Estado de Minas Gerais - UEMG\nUnidade Barbacena") +  # Adicionar rótulos
facet_wrap(~topicos, scales = "free", ncol = 5, nrow = 2,
labeller = as_labeller(c(topic1 = "Aliados\nn = 928 (9.1%)",
topic2 = "Presioneiros\nn = 1.225 (12%)",
topic3 = "Presioneiros\nn = 1.225 (12%)",
topic4 = "Presioneiros\nn = 1.225 (12%)",
topic5 = "Presioneiros\nn = 1.225 (12%)",
topic6 = "Presioneiros\nn = 1.225 (12%)",
topic7 = "Presioneiros\nn = 1.225 (12%)",
topic8 = "Presioneiros\nn = 1.225 (12%)",
topic9 = "Presioneiros\nn = 1.225 (12%)",
topic10 = "Presioneiros\nn = 1.225 (12%)"))) -> serie_temporal_temas_linhas
serie_temporal_temas_linhas
ggsave(plot = serie_temporal_temas_linhas, "serie_temporal_temas_linhas1.jpeg", height = 6, width = 10, units = "in", dpi = 600)
dataset_news_gaza_israel |>
select(topicos, ano) |>
# Adicionar uma coluna 'topicos' para ser usada como legenda e definir a ordem das categorias dos tópicos
mutate(topicos = factor(topicos, levels = c("topic1", "topic2", "topic3", "topic4", "topic5",
"topic6", "topic7", "topic8", "topic9", "topic10"))) |>
# Agrupar os dados por 'ano' e 'topicos'
group_by(ano, topicos) |>
# Contar o número de ocorrências de cada combinação de 'ano' e 'topicos'
count() |>
# Criar o gráfico de linha e ponto
ggplot(aes(x = ano, y = n, fill = topicos)) +
geom_col(size = .5) +  # Adicionar colunas
theme_bw() +  # Aplicar um tema de fundo branco
# Personalizar as configurações do tema
theme(
legend.position = "none",
plot.title = element_text(size = 18, face = "bold"),
plot.subtitle = element_text(size = 12, face = "bold"),
plot.caption = element_text(size = 10),
axis.title.y = element_text(size = 12, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
strip.text.x = element_text(size = 10, colour= "white", face= "bold"),
strip.background = element_rect(colour = "black", fill= "black"),
strip.text.x.top = element_text(colour = "white", face = "bold", size = 14),
axis.text.x = element_text(face = "bold", color = "black", size = 10),
axis.text.y = element_text(face = "bold", color = "black", size = 10)
) +
scale_y_continuous(labels = comma_format(big.mark = ".", decimal.mark = ",")) +  # Definir intervalo de valores no eixo y
labs(x = "Ano", y = "Frequência",
title = "Proporções dos tópicos ao longo do tempo em intervalo anual",
caption = "Fonte: Tuguna Digital Lab - Laboratório Experimental em Humanidades Digitais\nUniversidade do Estado de Minas Gerais - UEMG\nUnidade Barbacena") +  # Adicionar rótulos
facet_wrap(~topicos, scales = "free", ncol = 5, nrow = 2,
labeller = as_labeller(c(topic1 = "Aliados\nn = 928 (9.1%)",
topic2 = "Presioneiros\nn = 1.225 (12%)",
topic3 = "Presioneiros\nn = 1.225 (12%)",
topic4 = "Presioneiros\nn = 1.225 (12%)",
topic5 = "Presioneiros\nn = 1.225 (12%)",
topic6 = "Presioneiros\nn = 1.225 (12%)",
topic7 = "Presioneiros\nn = 1.225 (12%)",
topic8 = "Presioneiros\nn = 1.225 (12%)",
topic9 = "Presioneiros\nn = 1.225 (12%)",
topic10 = "Presioneiros\nn = 1.225 (12%)"))) -> serie_temporal_temas_colunas
serie_temporal_temas_colunas
dataset_news_gaza_israel |>
select(topicos, ano) |>
# Adicionar uma coluna 'topicos' para ser usada como legenda e definir a ordem das categorias dos tópicos
mutate(topicos = factor(topicos, levels = c("topic1", "topic2", "topic3", "topic4", "topic5",
"topic6", "topic7", "topic8", "topic9", "topic10"))) |>
# Agrupar os dados por 'ano' e 'topicos'
group_by(ano, topicos) |>
# Contar o número de ocorrências de cada combinação de 'ano' e 'topicos'
count() |>
# Criar o gráfico de linha e ponto
ggplot(aes(x = ano, y = n, fill = topicos)) +
geom_col(size = .5) +  # Adicionar colunas
theme_bw() +  # Aplicar um tema de fundo branco
# Personalizar as configurações do tema
theme(
legend.position = "none",
plot.title = element_text(size = 18, face = "bold"),
plot.subtitle = element_text(size = 12, face = "bold"),
plot.caption = element_text(size = 10),
axis.title.y = element_text(size = 12, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
strip.text.x = element_text(size = 10, colour= "white", face= "bold"),
strip.background = element_rect(colour = "black", fill= "black"),
strip.text.x.top = element_text(colour = "white", face = "bold", size = 14),
axis.text.x = element_text(face = "bold", color = "black", size = 10),
axis.text.y = element_text(face = "bold", color = "black", size = 10)
) +
scale_y_continuous(labels = comma_format(big.mark = ".", decimal.mark = ",")) +  # Definir intervalo de valores no eixo y
labs(x = "Ano", y = "Frequência",
title = "Proporções dos tópicos ao longo do tempo em intervalo anual",
caption = "Fonte: Tuguna Digital Lab - Laboratório Experimental em Humanidades Digitais\nUniversidade do Estado de Minas Gerais - UEMG\nUnidade Barbacena") +  # Adicionar rótulos
facet_wrap(~topicos, scales = "free", ncol = 5, nrow = 2,
labeller = as_labeller(c(topic1 = "Aliados\nn = 832 (8.2%)",
topic2 = "Reféns do Conflito\nn = 1.203 (12%)",
topic3 = "Yemenitas\nn = 669 (6.6%)",
topic4 = "Batalhas\nn = 1130 (11%)",
topic5 = "Conflito Irâ\nn = 1088 (11%)",
topic6 = "Perdas Humanas\nn = 1002 (9.9%)",
topic7 = "Crise Refugiados\nn = 1269 (12%)",
topic8 = "Manifestações\nn = 687 (6.8%)",
topic9 = "Negociações da ONU\nn = 1526 (15%)",
topic10 = "Ocupação Violenta\nn = 749 (7.4%)")))  -> serie_temporal_temas_colunas
serie_temporal_temas_colunas
################################################################################
#     Visualização do Resultados em comparação com as métricas do YouTube      #
################################################################################
engajamento <- dataset_news_gaza_israel |>
select(topicos, viewCount, likeCount, commentCount) %>%
mutate(topicos = recode(topicos,
topic1 = "Aliados",
topic2 = "Reféns do Conflito",
topic3 = "Yemenitas",
topic4 = "Batalhas",
topic5 = "Conflito Irâ",
topic6 = "Perdas Humanas",
topic7 = "Crise Refugiados",
topic8 = "Manifestações",
topic9 = "Negociações da ONU",
topic10 = "Ocupação Violenta")) |>
group_by(topicos) |>
summarise(view = sum(viewCount, na.rm = T),
likes = sum(likeCount, na.rm = T),
comments = sum(commentCount, na.rm = T))
engajamento
#-------------------------------------------------------------------------------
grafico_engajamento <- ggplot(engajamento, aes(x = likes, y = comments, fill = as.factor(topicos))) +  # Iniciar um objeto ggplot com dados de engajamento
geom_label_repel(aes(label = topicos),  # Adicionar rótulos repelidos com base nos tópicos
color = "black",        # Definir a cor do texto dos rótulos como branco
fontface = "bold",      # Definir a espessura da fonte como negrito
nudge_x = 0.15,         # Ajustar a posição horizontal dos rótulos
box.padding = 0.5,      # Definir o preenchimento interno dos rótulos
nudge_y = 1,            # Ajustar a posição vertical dos rótulos
segment.curvature = -0.1,  # Curvatura da linha de conexão dos rótulos
segment.ncp = 3,        # Parâmetro de suavização da curvatura
segment.angle = 20) +   # Ângulo de curvatura da linha de conexão
geom_point(aes(size = view), shape = 21, stroke = 2) +  # Adicionar pontos ao gráfico com tamanho variável
geom_hline(yintercept = 194462.8, linetype = "dashed", color = "grey") +  # Adicionar linha horizontal pontilhada
geom_vline(xintercept = 534312.2, linetype = "dashed", color = "grey") +  # Adicionar linha vertical pontilhada
geom_text(aes(x = 750000, y = 97000, label = "p = 0.653*"), size = 5, col = "black") +  # Adicionar texto de anotação
scale_x_continuous(expand = c(0.025,0.025), breaks = seq(427736, 800000, 30000), labels = comma_format(big.mark = ".", decimal.mark = ",")) +  # Ajustar escala e rótulos do eixo x
scale_y_continuous(expand = c(0.025,0.025), breaks = seq(63267, 352659, 50000), labels = comma_format(big.mark = ".", decimal.mark = ",")) +  # Ajustar escala e rótulos do eixo y
scale_fill_manual(values = c("#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a")) +  # Definir cores de preenchimento manualmente
labs(
x = "Soma de likes por temas",  # Definir rótulo do eixo x
y = "Soma de comentários por temas",  # Definir rótulo do eixo y
title = "Engajamento da audiência por tópicos temáticos",  # Definir título do gráfico
caption = "Fonte: Tuguna Digital Lab - Laboratório Experimental em Humanidades Digitais\nUniversidade do Estado de Minas Gerais - UEMG\nUnidade Barbacena") +  # Definir legenda
theme_classic() +  # Aplicar o tema clássico
theme(  # Personalizar o tema
legend.position = "none",  # Remover a legenda
plot.title = element_text(size = 16, face = "bold"),  # Definir estilo do título do gráfico
plot.caption = element_text(size = 10, face = "bold"),  # Definir estilo da legenda
axis.title.y = element_text(size = 10, face = "bold"),  # Definir estilo do título do eixo y
axis.title.x = element_text(size = 10, face = "bold"),  # Definir estilo do título do eixo x
axis.text.x = element_text(face = "bold", color = "black", size = 10),  # Definir estilo do texto do eixo x
axis.text.y = element_text(face = "bold", color = "black", size = 10))  # Definir estilo do texto do eixo y
grafico_engajamento
ggsave(plot = grafico_engajamento, "grafico03_engajamento.jpeg", height = 8, width = 12, units = "in", dpi = 600)
emo_data_news_gaza_israel <- dataset_news_gaza_israel  |>  # Inicia a sequência de operações encadeadas, atribuindo o resultado a uma variável chamada emo_data_news
get_sentences() |>  # Extrai sentenças do conjunto de dados
emotion_by() |>  # Calcula as emoções presentes em cada sentença
filter(emotion_type %in% c("anger", "disgust", "surprise", "trust", "fear", "anticipation", "joy", "sadness")) |>  # Filtra as emoções desejadas
pivot_wider(names_from = emotion_type,  # Transforma os dados de emoção em um formato mais amplo
values_from = c(word_count, sd, ave_emotion, emotion_count)) |>
rename(word_count = word_count_anger,  # Renomeia as colunas para uma melhor legibilidade
anger = ave_emotion_anger,
anticipation = ave_emotion_anticipation,
disgust = ave_emotion_disgust,
fear = ave_emotion_fear,
joy = ave_emotion_joy,
sadness = ave_emotion_sadness,
surprise = ave_emotion_surprise,
trust = ave_emotion_trust,
word_anger = emotion_count_anger,
word_anticipation = emotion_count_anticipation,
word_disgust = emotion_count_disgust,
word_fear = emotion_count_fear,
word_joy = emotion_count_joy,
word_sadness = emotion_count_sadness,
word_surprise = emotion_count_surprise,
word_trust = emotion_count_trust)  |>
select(-c(word_count_anticipation,  # Remove colunas desnecessárias
word_count_disgust,
word_count_fear,
word_count_sadness,
word_count_surprise,
word_count_trust,
word_count_joy,
sd_anger,
sd_anticipation,
sd_disgust,
sd_fear,
sd_joy,
sd_sadness,
sd_surprise,
sd_trust)) |>
mutate(emo_news = as.factor(factor(ifelse(anger > anticipation
& anger > disgust
& anger > fear
& anger > joy
& anger > sadness
& anger > surprise
& anger > trust, "Raiva",
ifelse(anticipation > anger
& anticipation > disgust
& anticipation > fear
& anticipation > joy
& anticipation > sadness
& anticipation > surprise
& anticipation > trust, "Antecipação",
ifelse(disgust > anger
& disgust > anticipation
& disgust > fear
& disgust > joy
& disgust > sadness
& disgust > surprise
& disgust > trust, "Nojo",
ifelse(fear > anger
& fear > anticipation
& fear > disgust
& fear > joy
& fear > sadness
& fear > surprise
& fear > trust, "Medo",
ifelse(joy > anger
& joy > anticipation
& joy > disgust
& joy > fear
& joy > sadness
& joy > surprise
& joy > trust, "Alegria",
ifelse(sadness > anger
& sadness > anticipation
& sadness > disgust
& sadness > fear
& sadness > joy
& sadness > surprise
& sadness > trust, "Tristeza",
ifelse(surprise > anger
& surprise > anticipation
& surprise > disgust
& surprise > fear
& surprise > joy
& surprise > sadness
& surprise > trust, "Surpresa",
ifelse(trust > anger
& trust > anticipation
& trust > disgust
& trust > fear
& trust > joy
& trust > sadness
& trust > surprise, "Confiança", "#"))))))))))) |>
bind_cols(dataset_news_gaza_israel)
summary(emo_data_news_gaza_israel$emo_news)
summary(emo_data_news_gaza_israel$emo_news)
#------------------------------------------------------------------------------#
emo_data_news_gaza_israel |>  # Selecionar o conjunto de dados sobre as notícias relacionadas ao conflito em Gaza e Israel
dplyr::select(word_anger, word_anticipation, word_disgust, word_fear, word_joy, word_sadness, word_surprise, word_trust) |>  # Selecionar as colunas de contagem de palavras para cada emoção
summarise(Raiva = sum(word_anger),  # Resumir a contagem total de palavras associadas à emoção de raiva
Antecipação = sum(word_anticipation),  # Resumir a contagem total de palavras associadas à emoção de antecipação
Nojo = sum(word_disgust),  # Resumir a contagem total de palavras associadas à emoção de nojo
Medo = sum(word_fear),  # Resumir a contagem total de palavras associadas à emoção de medo
Alegria = sum(word_joy),  # Resumir a contagem total de palavras associadas à emoção de alegria
Tristeza = sum(word_sadness),  # Resumir a contagem total de palavras associadas à emoção de tristeza
Surpresa = sum(word_surprise ),  # Resumir a contagem total de palavras associadas à emoção de surpresa
Confiança = sum(word_trust)) |>  # Resumir a contagem total de palavras associadas à emoção de confiança
pivot_longer(cols = Raiva:Confiança,  # Transformar os resultados resumidos em um formato longo para facilitar a visualização
names_to = "emo",  # Nomear a coluna que conterá as emoções
values_to = "freq") |>  # Nomear a coluna que conterá a frequência das emoções
dplyr::mutate(emo = factor(emo,  # Transformar a coluna 'emo' em um fator para ordenação correta das emoções
levels = c("Raiva", "Medo", "Nojo", "Tristeza", "Surpresa", "Antecipação", "Confiança", "Alegria")))|>  # Definir a ordem das emoções
ggplot() +  # Criar um objeto ggplot
aes(x = emo, y = freq,  fill = emo) +  # Definir as variáveis estéticas x, y e preenchimento (fill)
geom_col(position=position_dodge()) +  # Adicionar barras ao gráfico com a função de posicionamento dodge
scale_y_continuous(labels = unit_format(unit = "K", scale = 1e-3)) +  # Definir os rótulos do eixo y em milhares
scale_fill_brewer(palette = "RdBu") +  # Definir a paleta de cores para o preenchimento
labs(  # Adicionar rótulos e títulos ao gráfico
x = "Emoções",  # Rótulo do eixo x
y = "Frequência em milhares",  # Rótulo do eixo y
title = "Emoções nas notícias sobre o conflito Israel vs Hamas",  # Título do gráfico
subtitle = "Emoções ordenadas das mais negativas para as mais positivas",  # Subtítulo do gráfico
caption = "Fonte: Resultados originais da pesquisa, 2024.") +  # Fonte dos dados
theme_bw() +  # Aplicar o tema de fundo branco ao gráfico
theme(  # Personalizar as configurações do tema
legend.position = "none",  # Remover a legenda
plot.title = element_text(size = 18, face = "bold"),  # Personalizar o estilo do título
plot.subtitle = element_text(size = 12, face = "bold"),  # Personalizar o estilo do subtítulo
plot.caption = element_text(size = 10),  # Personalizar o estilo da legenda
axis.title.y = element_text(size = 10, face = "bold"),  # Personalizar o estilo do rótulo do eixo y
axis.title.x = element_text(size = 10, face = "bold"),  # Personalizar o estilo do rótulo do eixo x
strip.text.x = element_text(size = 10, colour= "white", face= "bold"),  # Personalizar o estilo do texto dos painéis x
strip.background = element_rect(colour = "black", fill= "black"),  # Personalizar o fundo dos painéis
axis.text.x = element_text(face = "bold", color = "black", size = 10),  # Personalizar o estilo do texto do eixo x
axis.text.y = element_text(face = "bold", color = "black", size = 10)) -> plot_emo_news_gaza_israel  # Personalizar o estilo do texto do eixo y e atribuir o gráfico a uma variável
plot_emo_news_gaza_israel
ggsave(plot =  plot_emo_news_gaza_israel, "plot_emo_news_gaza_israel.svg", height = 6, width = 10, units = "in", dpi = 600)
ggsave(plot =  plot_emo_news_gaza_israel, "plot_emo_news_gaza_israel.png", height = 6, width = 10, units = "in", dpi = 600)
ggsave(plot =  plot_emo_news_gaza_israel, "plot_emo_news_gaza_israel.jpeg", height = 6, width = 10, units = "in", dpi = 600)
ggsave(plot =  plot_emo_news_gaza_israel, "plot_emo_news_gaza_israel.pdf", height = 6, width = 10, units = "in", dpi = 600)
################################################################################
#                      Análise Exploratória Multivariada                       #
################################################################################
# Criar uma base específica para fazer a Análise de Correspondências Múltiplas - ACM
ACM_news_gaza_israel <- emo_data_news_gaza_israel |>
dplyr::select(topicos, ano, nomes_paises, emo_news)|>
mutate(topicos = recode(topicos,
topic1 = "Aliados",
topic2 = "Reféns do Conflito",
topic3 = "Yemenitas",
topic4 = "Batalhas",
topic5 = "Conflito Irâ",
topic6 = "Perdas Humanas",
topic7 = "Crise Refugiados",
topic8 = "Manifestações",
topic9 = "Negociações da ONU",
topic10 = "Ocupação Violenta"))
# Aplicar o algorítmo que calcula a ACM
ACM <- MCA(ACM_news_gaza_israel, method = "Burt")
#Para o estabelecimento de um Mapa Perceptual, precisamos:
#1º Definir o número de categorias por variável
categorias <- apply(ACM_news_gaza_israel[,1:4],
MARGIN =  2,
FUN = function(x) nlevels(as.factor(x)))
#2º transformar o objeto ACM em um data frame, levando-se em consideração quais
#tipos de coordenadas se quer plotar. Neste exemplo, utilizaremos as coordenadas
#dadas pela matriz de binária
ACM_mp <- data.frame(ACM$var$coord, Variável = rep(names(categorias), categorias))
#Plotar o Mapa Perceptual:
ACM_mp %>%
rownames_to_column() %>%
rename(Categoria = 1) %>%
ggplot(aes(x = Dim.1,
y = Dim.2,
label = Categoria,
color = Variável,
shape = Variável)) +
geom_point(size = 3) +
geom_label_repel() +
geom_vline(aes(xintercept = 0), linetype = "dashed", color = "grey") +
geom_hline(aes(yintercept = 0), linetype = "dashed", color = "grey") +
labs(x = paste("Dimensão 1:", paste0(round(ACM$eig[1,2], 2), "%")),
y = paste("Dimensão 2:", paste0(round(ACM$eig[2,2], 2), "%"))) +
scale_colour_manual(values = c('#1b9e77','#d95f02','#7570b3','#e7298a')) +
theme(panel.background = element_rect("white"),
panel.border = element_rect("NA"),
panel.grid = element_line("gray95"),
legend.position = "none") +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.title.y = element_text(size = 10L, face = "bold"),
axis.title.x = element_text(size = 10L, face = "bold"),
axis.text.x = element_text(face = "bold", color = "black", size = 10),
axis.text.y = element_text(face = "bold", color = "black", size = 10)) +
labs(title = "Mapa Perceptual da Análise de Correspondências Múltiplas - ACM",
caption = "Fonte: Tuguna Digital Lab - Laboratório Experimental em Humanidades Digitais\nUniversidade do Estado de Minas Gerais - UEMG\nUnidade Barbacena") -> grafico_ACM
grafico_ACM
ggsave(plot = grafico_ACM, "grafico06_ACM.jpeg", height = 8, width = 15, units = "in", dpi = 600)
